{"version":3,"sources":["../src/index.ts","../src/app/index.ts","../src/app/router/index.ts","../src/app/router/health.router.ts","../src/exception/catchAsync.ts","../src/app/controllers/health.controller.ts","../src/middlewares/errorHandler.middleware.ts","../src/exception/BaseError.ts","../src/exception/CustomError.ts","../src/middlewares/notFound.middleware.ts","../src/middlewares/cors.middleware.ts","../src/constants/config.ts","../src/middlewares/morgan.middleware.ts","../src/lib/logger.ts","../src/middlewares/validation.middleware.ts","../src/middlewares/rateLimiter.middleware.ts","../src/docs/configure-open-api.ts"],"sourcesContent":["import \"dotenv/config\";\r\nimport app from \"@/app\";\r\nimport _ from \"@/@types\";\r\nimport { config } from \"@/constants\";\r\nconst run = async () => {\r\n    try {\r\n        app.listen(config.server.port, () => console.info(`Server running at http://localhost:${config.server.port}`));\r\n    } catch (error) {\r\n        console.error(\"Failed to start server\", { error });\r\n        process.exit(1);\r\n    }\r\n};\r\n\r\nrun();\r\n","import express from \"express\";\r\nimport { router } from \"./router\";\r\nimport {\r\n    corsMiddleware,\r\n    errorHandlerMiddleware,\r\n    morganMiddleware,\r\n    notFoundMiddleware,\r\n    rateLimiterMiddleware,\r\n} from \"@/middlewares\";\r\nimport { configureOpenAPI } from \"@/docs/configure-open-api\";\r\nimport path from \"path\";\r\nimport { cwd } from \"process\";\r\n\r\nconst app = express();\r\n// Middlewares\r\napp.use(rateLimiterMiddleware);\r\napp.use(corsMiddleware);\r\napp.use(express.json({ limit: \"10mb\" }));\r\napp.use(express.urlencoded({ limit: \"10mb\", extended: true }));\r\napp.use(morganMiddleware);\r\napp.use(\"/public\", express.static(path.join(cwd(), \"/public\")));\r\nconsole.log(`path.join(cwd(), \"/public\")`);\r\nconsole.log(path.join(cwd(), \"/public\"));\r\n\r\n\r\n\r\n// Routes\r\napp.use(\"/api/docs/reference\", configureOpenAPI);\r\napp.use(\"/api\", router);\r\n\r\n// Error handling\r\napp.use(notFoundMiddleware);\r\napp.use(errorHandlerMiddleware);\r\n\r\nexport default app;\r\n","// Router\r\nimport { Router } from \"express\";\r\nimport { healthRouter } from \"./health.router\";\r\nconst router = Router();\r\n\r\nrouter.use(\"/health\", healthRouter);\r\n\r\nexport { router };\r\n","// single router\r\nimport { Router } from \"express\";\r\nimport { healthController } from \"@/app/controllers\";\r\nconst healthRouter = Router();\r\n\r\nhealthRouter.route(\"/\").get(healthController.health);\r\n\r\nexport { healthRouter };\r\n","import { Request, Response, NextFunction } from \"express\";\r\ntype AsyncFunction = (req: Request, res: Response, next: NextFunction) => Promise<void>;\r\n\r\n/**\r\n * Catch async errors without try/catch blocks\r\n */\r\nexport const catchAsync = (fn: AsyncFunction) => {\r\n    return (req: Request, res: Response, next: NextFunction) => {\r\n        fn(req, res, next).catch(next);\r\n    };\r\n};\r\n","// Controller\r\nimport { catchAsync } from \"@/exception/catchAsync\";\r\nimport { Request, Response } from \"express\";\r\n\r\nexport const healthController = {\r\n    health: catchAsync(async (_req: Request, res: Response) => {\r\n        res.status(200).json({ success: true, message: \"Server is running\" });\r\n    }),\r\n};\r\n","import { StatusCodes, ReasonPhrases } from \"http-status-codes\";\r\nimport { BaseError, CustomError } from \"@/exception\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\nexport function errorHandlerMiddleware(err: CustomError, _req: Request, res: Response, _next: NextFunction) {\r\n    if (err instanceof BaseError) {\r\n        const { statusCode, details, logging } = err;\r\n        if (logging) {\r\n            console.error(\r\n                JSON.stringify(\r\n                    {\r\n                        code: err.statusCode,\r\n                        errors: err.errors,\r\n                        stack: err.stack,\r\n                    },\r\n                    null,\r\n                    2,\r\n                ),\r\n            );\r\n        }\r\n        res.status(statusCode).send(details);\r\n    } else {\r\n        console.error(err);\r\n        res.status(StatusCodes.INTERNAL_SERVER_ERROR).send({\r\n            errors: [{ message: ReasonPhrases.INTERNAL_SERVER_ERROR }],\r\n        });\r\n    }\r\n}\r\n","export type BaseErrorContent = { [key: string]: any };\r\n\r\nexport abstract class BaseError extends Error {\r\n    abstract readonly statusCode: number;\r\n    abstract readonly logging: boolean;\r\n    abstract readonly errors?: BaseErrorContent[];\r\n\r\n    constructor(message: string) {\r\n        super(message);\r\n        Object.setPrototypeOf(this, BaseError.prototype); // Maintain prototype chain\r\n    }\r\n}\r\n","import { BaseError, BaseErrorContent } from \"./BaseError\";\r\n\r\nexport type ParamsType = {\r\n    message?: string;\r\n    statusCode?: number;\r\n    logging?: boolean;\r\n    errors?: BaseErrorContent[];\r\n};\r\n/**\r\n * Custom error class that extends BaseError\r\n * @param message - Error message\r\n * @param statusCode - HTTP status code\r\n * @param logging - Whether to log the error\r\n * @param errors - Array of error details\r\n * @example\r\n * ```typescript\r\n * const validationError = new CustomError({\r\n *     message: \"Invalid input\",\r\n *     statusCode: 400,\r\n *     errors: [\r\n *         { field: \"username\", message: \"Username is required\" },\r\n *         { field: \"email\", message: \"Email is required\" },\r\n *         { field: \"password\", message: \"Password is required\" },\r\n *     ],\r\n * });\r\n * ```\r\n*/\r\nexport class CustomError extends BaseError {\r\n    private readonly _statusCode: number;\r\n    private readonly _logging: boolean;\r\n    private readonly _errors?: BaseErrorContent[];\r\n\r\n    constructor({ message = \"Internal Server Error\", statusCode = 500, logging = false, errors }: ParamsType) {\r\n        super(message);\r\n        this._statusCode = statusCode;\r\n        this._logging = logging;\r\n        this._errors = errors && errors.length ? errors : undefined;\r\n        this.name = \"CustomError\";\r\n\r\n        Object.setPrototypeOf(this, CustomError.prototype); // Maintain prototype chain\r\n    }\r\n    \r\n    get statusCode(): number {\r\n        return this._statusCode;\r\n    }\r\n\r\n    get errors(): BaseErrorContent[] | undefined {\r\n        return this._errors;\r\n    }\r\n\r\n    get logging(): boolean {\r\n        return this._logging;\r\n    }\r\n\r\n    get details(): Record<string, unknown> {\r\n        return {\r\n            success: false,\r\n            statusCode: this._statusCode,\r\n            message: this.message,\r\n            ...(this._errors ? { errors: this._errors } : {}),\r\n        };\r\n    }\r\n}","import { CustomError } from \"@/exception\";\r\nimport { Request, Response } from \"express\";\r\nimport { StatusCodes } from \"http-status-codes\";\r\n\r\nexport const notFoundMiddleware = (req: Request, _res: Response) => {\r\n    throw new CustomError({\r\n        statusCode: StatusCodes.NOT_FOUND,\r\n        message: \"Endpoint Not Found\",\r\n        errors: [{ endpoint: req.originalUrl }],\r\n        logging: true,\r\n    });\r\n};\r\n","import { StatusCodes } from \"http-status-codes\";\r\nimport cors from \"cors\";\r\nimport { config } from \"@/constants\";\r\nimport { CustomError } from \"@/exception\";\r\n\r\nexport const corsMiddleware = cors({\r\n    origin: (origin, callback) => {\r\n        if (!origin) {\r\n            // Allow requests with no origin (e.g., mobile apps, server-to-server)\r\n            return callback(null, true);\r\n        }\r\n\r\n        // Allow only origins in the whitelist\r\n        const isAllowed = config.server.allowedOrigins.some(\r\n            (allowedOrigin) => new URL(allowedOrigin).origin === new URL(origin).origin,\r\n        );\r\n\r\n        if (isAllowed) {\r\n            callback(null, true);\r\n        } else {\r\n            callback(\r\n                new CustomError({\r\n                    statusCode: StatusCodes.FORBIDDEN,\r\n                    message: `Origin ${origin} not allowed by CORS`,\r\n                    logging: true,\r\n                }),\r\n            );\r\n        }\r\n    },\r\n    methods: \"GET,HEAD,PUT,PATCH,POST,DELETE\",\r\n    allowedHeaders: [\"Content-Type\", \"Authorization\", \"Accept-Version\"],\r\n    exposedHeaders: [\"X-Total-Count\", \"Content-Range\"],\r\n    credentials: true,\r\n    preflightContinue: false,\r\n    maxAge: 600,\r\n    optionsSuccessStatus: StatusCodes.NO_CONTENT,\r\n});\r\n","export const config = {\r\n    server: {\r\n        version: process.env.VERSION || \"v1\",\r\n        port: parseInt(process.env.PORT || \"8000\"),\r\n        allowedOrigins: JSON?.parse(process.env.ALLOWED_ORIGINS || \"[]\") as string[],\r\n        nodeEnv: process?.env?.NODE_ENV || \"development\",\r\n    },\r\n    database: {\r\n        url: process.env.DATABASE_URL,\r\n    },\r\n};\r\n","import morgan, { StreamOptions } from \"morgan\";\r\nimport { logger } from \"@/lib\";\r\nimport { config } from \"@/constants\";\r\nconst stream: StreamOptions = {\r\n    // Use the http severity\r\n    write: (message) => logger.http(message),\r\n};\r\nconst skip = () => {\r\n    const env = config.server.nodeEnv || \"development\";\r\n    return env !== \"development\";\r\n};\r\nexport const morganMiddleware = morgan(\r\n    // Define message format string (this is the default one).\r\n    // The message format is made from tokens, and each token is\r\n    // defined inside the Morgan library.\r\n    // You can create your custom token to show what do you want from a request.\r\n    \":remote-addr :method :url :status :res[content-length] - :response-time ms\",\r\n    // Options: in this case, I overwrote the stream and the skip logic.\r\n    // See the methods above.\r\n    { stream, skip },\r\n);\r\n","import { config } from \"@/constants\";\r\nimport winston from \"winston\";\r\nimport { join } from \"path\";\r\n\r\nconst isDevelopment = config.server.nodeEnv === \"development\";\r\n\r\nconst logDir = isDevelopment ? join(process.cwd(), \"/tmp\", \"logs\") : join(\"/tmp\", \"logs\");\r\nconst defaultMeta = { service: \"express-server\" };\r\nconst levels = {\r\n    error: 0,\r\n    warn: 1,\r\n    info: 2,\r\n    http: 3,\r\n    verbose: 4,\r\n    debug: 5,\r\n    silly: 6,\r\n};\r\nconst colors = {\r\n    error: \"red\",\r\n    warn: \"yellow\",\r\n    info: \"green\",\r\n    http: \"magenta\",\r\n    debug: \"black\",\r\n};\r\nconst level = () => {\r\n    return isDevelopment ? \"debug\" : \"warn\";\r\n};\r\n\r\nwinston.addColors(colors);\r\n\r\nconst format = winston.format.combine(\r\n    // Add the message timestamp with the preferred format\r\n    winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss:ms\" }),\r\n    // Tell Winston that the logs must be colored\r\n    winston.format.colorize({ all: true }),\r\n    // Define the format of the message showing the timestamp, the level and the message\r\n    winston.format.printf((info) => `${info.timestamp} ${info.level}: ${info.message}`)\r\n);\r\nconst transports = [\r\n    new winston.transports.Console(),\r\n    new winston.transports.File({ filename: join(logDir, \"/error.log\"), level: \"error\" }),\r\n    new winston.transports.File({ filename: join(logDir, \"/all.log\") }),\r\n];\r\nexport const logger = winston.createLogger({\r\n    defaultMeta,\r\n    level: level(),\r\n    levels,\r\n    format,\r\n    transports,\r\n});","import { Request, Response, NextFunction } from \"express\";\r\nimport { ZodSchema } from \"zod\";\r\nimport { StatusCodes } from \"http-status-codes\";\r\nimport { CustomError } from \"@/exception\";\r\n\r\n/**\r\n * Middleware to validate request data using a Zod schema.\r\n * Supports validation for body, query params, and headers.\r\n */\r\nexport function validationMiddleware(schema: ZodSchema<any>, source: \"body\" | \"query\" | \"params\" = \"body\") {\r\n    return (req: Request, _res: Response, next: NextFunction) => {\r\n        const dataToValidate = req[source]; // Validate body, query, or params\r\n        const validationResult = schema.safeParse(dataToValidate);\r\n\r\n        if (!validationResult.success) {\r\n            return next(\r\n                new CustomError({\r\n                    statusCode: StatusCodes.UNPROCESSABLE_ENTITY,\r\n                    message: \"Validation failed\",\r\n                    errors: validationResult.error.errors.map((err) => ({\r\n                        field: err.path.join(\".\"),\r\n                        message: err.message,\r\n                    })),\r\n                }),\r\n            );\r\n        }\r\n\r\n        next();\r\n    };\r\n}\r\n","import rateLimit from \"express-rate-limit\";\r\nimport { StatusCodes } from \"http-status-codes\";\r\nexport const rateLimiterMiddleware = rateLimit({\r\n    windowMs: 5 * 60 * 1000, // 5 minutes\r\n    max: 100, // Limit each IP to 100 requests per windowMs\r\n    message: {\r\n        success: false,\r\n        statusCode: StatusCodes.TOO_MANY_REQUESTS,\r\n        message: \"Too many requests, please try again later.\",\r\n    },\r\n    standardHeaders: true, // Return rate limit info in headers\r\n    legacyHeaders: false, // Disable the `X-RateLimit-*` headers\r\n});\r\n","import { apiReference } from \"@scalar/express-api-reference\";\r\n\r\nconst configureOpenAPI =  apiReference({\r\n    theme: \"kepler\",\r\n    defaultHttpClient: {\r\n        targetKey: \"js\",\r\n        clientKey: \"fetch\",\r\n    },\r\n    pageTitle: \"Awesome API\",\r\n    url: `/public/docs/openapi.yaml`,\r\n});\r\n\r\nexport { configureOpenAPI };\r\n"],"mappings":"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","names":["Router","Router","StatusCodes","StatusCodes","StatusCodes","StatusCodes","StatusCodes"]}